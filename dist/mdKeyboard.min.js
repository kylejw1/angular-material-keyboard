!function(angular){"use strict";function MdAutocompleteDecorator($provide){$provide.decorator("mdAutocompleteDirective",["$q","$log","$delegate","$timeout","$compile","$mdUtil","$mdConstant",function($q,$log,$delegate,$timeout,$compile,$mdUtil,$mdConstant){var directive=$delegate[0],compile=directive.compile;return directive.compile=function(){var link=compile.apply(this,arguments);return function(scope,element,attrs,MdAutocompleteCtrl){angular.isDefined(link)&&link.apply(this,arguments),angular.isDefined(attrs.useKeyboard)&&$timeout(function(){function select(index){function getDisplayValue(item){return $q.when(getItemText(item)||item)}function getItemText(item){return item&&scope.itemText?scope.itemText(getItemAsNameVal(item)):null}function getItemAsNameVal(item){if(item){var locals={};return MdAutocompleteCtrl.itemName&&(locals[MdAutocompleteCtrl.itemName]=item),locals}}$mdUtil.nextTick(function(){getDisplayValue(MdAutocompleteCtrl.matches[index]).then(function(val){var ngModel=compiled.controller("ngModel");ngModel.$setViewValue(val),ngModel.$render()})["finally"](function(){scope.selectedItem=MdAutocompleteCtrl.matches[index],MdAutocompleteCtrl.loading=!1,MdAutocompleteCtrl.hidden=!0})},!1)}function keydownDecorated(event){function hasSelection(){return!!MdAutocompleteCtrl.scope.selectedItem}switch(event.keyCode){case $mdConstant.KEY_CODE.ENTER:if(MdAutocompleteCtrl.hidden||MdAutocompleteCtrl.loading||MdAutocompleteCtrl.index<0||MdAutocompleteCtrl.matches.length<1)return;if(hasSelection())return;event.stopPropagation(),event.preventDefault(),select(MdAutocompleteCtrl.index);break;case $mdConstant.KEY_CODE.TAB:case $mdConstant.KEY_CODE.ESCAPE:compiled.blur(),scope.searchText&&keydown.call(MdAutocompleteCtrl,event);break;default:keydown.call(MdAutocompleteCtrl,event)}}var input=angular.element(element[0].querySelector('input[type="search"]:not(use-keyboard)')),cloned=input.clone(!0,!0).attr("use-keyboard",attrs.useKeyboard),compiled=$compile(cloned)(scope);input.replaceWith(compiled);var keydown=MdAutocompleteCtrl.keydown;MdAutocompleteCtrl.select=select,MdAutocompleteCtrl.keydown=keydownDecorated})}},$delegate}])}function MdKeyboardProvider($$interimElementProvider,keyboardLayouts,keyboardDeadkey,keyboardSymbols,keyboardNumpad){function getCurrentLayout(){return CURRENT_LAYOUT}function getLayout(layout){if(LAYOUTS[layout])return LAYOUTS[layout]}function getLayouts(){var layouts=[];return angular.forEach(LAYOUTS,function(obj,layout){layouts.push(layout)}),layouts}function defaultLayout(layout){if(LAYOUTS[layout])DEFAULT_LAYOUT=layout,CURRENT_LAYOUT=layout;else if(layout.length){var msg="The keyboard layout '"+layout+"' does not exists. \nThe default layout \""+DEFAULT_LAYOUT+"\" will be used.\nTo get a list of the available layouts use 'showLayouts'.";console.warn(msg)}}function useLayout(layout){if(layout&&LAYOUTS[layout])CURRENT_LAYOUT=layout;else if(CURRENT_LAYOUT=DEFAULT_LAYOUT,layout.length){var msg="The keyboard layout '"+layout+"' does not exists. \nThe default layout \""+DEFAULT_LAYOUT+"\" will be used.\nTo get a list of the available layouts use 'showLayouts'.";console.warn(msg)}SCOPE&&SCOPE.$broadcast("$mdKeyboardLayoutChanged",CURRENT_LAYOUT)}function addLayout(layout,keys){if(layout)if(LAYOUTS[layout]){var msg="The keyboard layout '"+layout+"' already exists. \nPlease use a different name.";console.warn(msg)}else LAYOUTS[layout]=keys}function isVisible(){return VISIBLE}function keyboardDefaults($window,$animate,$rootElement,$mdConstant,$mdUtil,$mdTheming,$mdKeyboard,$mdGesture){function onShow(scope,element,options){var keyboard=new Keyboard(element,options.parent);return options.keyboard=keyboard,options.parent.prepend(keyboard.element),SCOPE=scope,VISIBLE=!0,$mdTheming.inherit(keyboard.element,options.parent),options.disableParentScroll&&(options.restoreScroll=$mdUtil.disableScrollAround(keyboard.element,options.parent)),$animate.enter(keyboard.element,options.parent).then(function(){options.escapeToClose&&(options.rootElementKeyupCallback=function(e){e.keyCode===$mdConstant.KEY_CODE.ESCAPE&&$mdUtil.nextTick($mdKeyboard.cancel,!0)},$rootElement.on("keyup",options.rootElementKeyupCallback))})}function onRemove(scope,element,options){var keyboard=options.keyboard;return $animate.leave(keyboard.element).then(function(){VISIBLE=!1,options.disableParentScroll&&(options.restoreScroll(),delete options.restoreScroll),keyboard.cleanup()})}function Keyboard(element,parent){function onMouseDown(ev){ev.preventDefault()}function onDragStart(ev){element.css($mdConstant.CSS.TRANSITION_DURATION,"0ms")}function onDrag(ev){var transform=ev.pointer.distanceY;transform<5&&(transform=Math.max(-PADDING,transform/2)),element.css($mdConstant.CSS.TRANSFORM,"translate3d(0,"+(PADDING+transform)+"px,0)")}function onDragEnd(ev){if(ev.pointer.distanceY>0&&(ev.pointer.distanceY>20||Math.abs(ev.pointer.velocityY)>CLOSING_VELOCITY)){var distanceRemaining=element.prop("offsetHeight")-ev.pointer.distanceY,transitionDuration=Math.min(distanceRemaining/ev.pointer.velocityY*.75,500);element.css($mdConstant.CSS.TRANSITION_DURATION,transitionDuration+"ms"),$mdUtil.nextTick($mdKeyboard.cancel,!0),$window.document.activeElement.blur()}else element.css($mdConstant.CSS.TRANSITION_DURATION,""),element.css($mdConstant.CSS.TRANSFORM,"")}var deregister=$mdGesture.register(parent,"drag",{horizontal:!1});return element.on("mousedown",onMouseDown),parent.on("$md.dragstart",onDragStart).on("$md.drag",onDrag).on("$md.dragend",onDragEnd),{element:element,cleanup:function(){deregister(),parent.off("$md.dragstart",onDragStart),parent.off("$md.drag",onDrag),parent.off("$md.dragend",onDragEnd),parent.triggerHandler("focus")}}}return{onShow:onShow,onRemove:onRemove,themable:!0,disableParentScroll:!0,clickOutsideToClose:!0,layout:CURRENT_LAYOUT,layouts:LAYOUTS,deadkey:DEADKEY,symbols:SYMBOLS,numpad:NUMPAD}}keyboardDefaults.$inject=["$window","$animate","$rootElement","$mdConstant","$mdUtil","$mdTheming","$mdKeyboard","$mdGesture"];var SCOPE,CLOSING_VELOCITY=.5,PADDING=80,DEFAULT_LAYOUT="US International",CURRENT_LAYOUT=DEFAULT_LAYOUT,LAYOUTS=keyboardLayouts,DEADKEY=keyboardDeadkey,SYMBOLS=keyboardSymbols,NUMPAD=keyboardNumpad,VISIBLE=!1,$mdKeyboard=$$interimElementProvider("$mdKeyboard").setDefaults({methods:["themable","disableParentScroll","clickOutsideToClose","layout"],options:keyboardDefaults}).addMethod("getLayout",getLayout).addMethod("getCurrentLayout",getCurrentLayout).addMethod("getLayouts",getLayouts).addMethod("defaultLayout",defaultLayout).addMethod("useLayout",useLayout).addMethod("addLayout",addLayout).addMethod("isVisible",isVisible);return $mdKeyboard.getLayout=getLayout,$mdKeyboard.getCurrentLayout=getCurrentLayout,$mdKeyboard.getLayouts=getLayouts,$mdKeyboard.defaultLayout=defaultLayout,$mdKeyboard.useLayout=useLayout,$mdKeyboard.addLayout=addLayout,$mdKeyboard.isVisible=isVisible,$mdKeyboard}function MdKeyboardDirective($mdKeyboard){return{restrict:"E",link:function(scope){scope.$on("$destroy",function(){$mdKeyboard.destroy()})}}}function useKeyboardDirective($mdKeyboard,$timeout,$animate,$rootScope){return{restrict:"A",require:"?ngModel",link:function(scope,element,attrs,ngModelCtrl){function showKeyboard(){$rootScope.keyboardTimeout&&$timeout.cancel($rootScope.keyboardTimeout),$rootScope.keyboardAnimation&&$animate.cancel($rootScope.keyboardAnimation),$mdKeyboard.isVisible()?($mdKeyboard.currentModel=ngModelCtrl,$mdKeyboard.useLayout(attrs.useKeyboard)):($mdKeyboard.currentModel=ngModelCtrl,$rootScope.keyboardAnimation=$mdKeyboard.show({template:'<md-keyboard class="md-grid" layout="column" ng-cloak><div ng-repeat="row in keyboard.keys" layout="row"><div flex ng-repeat="key in row" ng-switch="key[0]" ng-class="getKeyClass(key)"><span ng-switch-when="Bksp"><md-button class="md-raised key-bksp" ng-mousedown="pressed($event, key[0])" aria-label="{{key[0] || \'key\'}}"><md-icon>keyboard_backspace</md-icon></md-button></span> <span ng-switch-when="Tab"><md-button class="md-raised key-tab" ng-mousedown="pressed($event, key[0])" aria-label="{{key[0] || \'key\'}}"><md-icon>keyboard_tab</md-icon></md-button></span> <span ng-switch-when="Caps"><md-button class="md-raised key-caps" ng-class="{\'locked\': capsLocked, \'md-focused\': capsLocked}" ng-mousedown="pressed($event, key[0])" aria-label="{{key[0] || \'key\'}}"><md-icon>keyboard_capslock</md-icon></md-button></span> <span ng-switch-when="Enter"><md-button class="md-raised key-enter" ng-mousedown="pressed($event, key[0])" aria-label="{{key[0] || \'key\'}}"><md-icon>keyboard_return</md-icon></md-button></span> <span ng-switch-when="Shift"><md-button class="md-raised key-shift" ng-mousedown="pressed($event, key[0])" aria-label="{{key[0] || \'key\'}}">{{key[0]}}</md-button></span> <span ng-switch-when="Spacer"></span> <span ng-switch-default><md-button class="md-raised key-char" ng-mousedown="pressed($event, key[!capsLocked && !caps ? 0 : 1] || key[0])" aria-label="{{key[!capsLocked && !caps ? 0 : 1] || \'key\'}}">{{key[!capsLocked && !caps ? 0 : 1] || key[0]}}</md-button></span></div></div></md-keyboard>',controller:mdKeyboardController,bindToController:!0}))}function mdKeyboardController($scope){$mdKeyboard.useLayout(attrs.useKeyboard);var getKeyClass=function(key){var k=(key[0]||" ").toLowerCase(),keys=["bksp","tab","caps","enter","shift","alt","altgr","altlk"];if(" "==k)k="space";else if(keys.indexOf(k)<0)k="char";else if("spacer"==k)return k;return"key-"+k},triggerKey=function($event,key){switch($event.preventDefault(),key){case"Caps":$scope.capsLocked=!$scope.capsLocked,$scope.caps=!1;break;case"Shift":$scope.caps=!$scope.caps;break;case"Alt":case"AltGr":case"AltLk":break;case"Tab":$mdKeyboard.currentModel.$setViewValue(($mdKeyboard.currentModel.$viewValue||"")+"\t"),$mdKeyboard.currentModel.$validate(),$mdKeyboard.currentModel.$render();break;case"Bksp":$mdKeyboard.currentModel.$setViewValue(($mdKeyboard.currentModel.$viewValue||"").slice(0,-1)),$mdKeyboard.currentModel.$validate(),$mdKeyboard.currentModel.$render();break;case"Enter":"TEXTAREA"!=element[0].nodeName.toUpperCase()?$timeout(function(){angular.element(element[0].form).triggerHandler("submit")}):($mdKeyboard.currentModel.$setViewValue(($mdKeyboard.currentModel.$viewValue||"")+"\n"),$mdKeyboard.currentModel.$validate(),$mdKeyboard.currentModel.$render());break;default:$mdKeyboard.currentModel.$setViewValue(($mdKeyboard.currentModel.$viewValue||"")+key[0]),$mdKeyboard.currentModel.$validate(),$mdKeyboard.currentModel.$render(),$scope.caps=!1}},_init=function(){$scope.resolve=function(){$mdKeyboard.hide("ok")},$scope.getKeyClass=getKeyClass,$scope.keyboard=$mdKeyboard.getLayout($mdKeyboard.getCurrentLayout()),$scope.pressed=triggerKey,$scope.$on("$mdKeyboardLayoutChanged",function($event,layout){$scope.keyboard=$mdKeyboard.getLayout(layout),$scope.$apply()})};_init()}function hideKeyboard(){$rootScope.keyboardTimeout&&$timeout.cancel($rootScope.keyboardTimeout),$rootScope.keyboardTimeout=$timeout(function(){$rootScope.keyboardAnimation=$mdKeyboard.hide()},200)}if(ngModelCtrl){var isMobile=!1;!function(a){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))&&(isMobile=!0)}(navigator.userAgent||navigator.vendor||window.opera),isMobile&&attrs.showInMobile!==!0||element.bind("focus",showKeyboard).bind("blur",hideKeyboard)}}}}MdAutocompleteDecorator.$inject=["$provide"],MdKeyboardProvider.$inject=["$$interimElementProvider","keyboardLayouts","keyboardDeadkey","keyboardSymbols","keyboardNumpad"],MdKeyboardDirective.$inject=["$mdKeyboard"],useKeyboardDirective.$inject=["$mdKeyboard","$timeout","$animate","$rootScope"],angular.module("material.components.keyboard",["material.core","material.components.icon"]),angular.module("material.components.keyboard").config(["$mdIconProvider",function($mdIconProvider){$mdIconProvider.fontSet("md","material-icons")}]),angular.module("material.components.keyboard").constant("keyboardLayouts",function(){var layouts={"US Standard":{name:"US Standard",keys:[[["`","~"],["1","!"],["2","@"],["3","#"],["4","$"],["5","%"],["6","^"],["7","&"],["8","*"],["9","("],["0",")"],["-","_"],["=","+"],["Bksp","Bksp"]],[["Tab","Tab"],["q","Q"],["w","W"],["e","E"],["r","R"],["t","T"],["y","Y"],["u","U"],["i","I"],["o","O"],["p","P"],["[","{"],["]","}"],["\\","|"]],[["Caps","Caps"],["a","A"],["s","S"],["d","D"],["f","F"],["g","G"],["h","H"],["j","J"],["k","K"],["l","L"],[";",":"],["'",'"'],["Enter","Enter"]],[["Shift","Shift"],["z","Z"],["x","X"],["c","C"],["v","V"],["b","B"],["n","N"],["m","M"],[",","<"],[".",">"],["/","?"],["Shift","Shift"]],[[" "," "]]],lang:["en-us"]},"US International":{name:"US International",keys:[[["`","~"],["1","!","¡","¹"],["2","@","²"],["3","#","³"],["4","$","¤","£"],["5","%","€"],["6","^","¼"],["7","&","½"],["8","*","¾"],["9","(","‘"],["0",")","’"],["-","_","¥"],["=","+","×","÷"],["Bksp","Bksp"]],[["Tab","Tab"],["q","Q","ä","Ä"],["w","W","å","Å"],["e","E","é","É"],["r","R","®"],["t","T","þ","Þ"],["y","Y","ü","Ü"],["u","U","ú","Ú"],["i","I","í","Í"],["o","O","ó","Ó"],["p","P","ö","Ö"],["[","{","«"],["]","}","»"],["\\","|","¬","¦"]],[["Caps","Caps"],["a","A","á","Á"],["s","S","ß","§"],["d","D","ð","Ð"],["f","F"],["g","G"],["h","H"],["j","J"],["k","K"],["l","L","ø","Ø"],[";",":","¶","°"],["'",'"',"´","¨"],["Enter","Enter"]],[["Shift","Shift"],["z","Z","æ","Æ"],["x","X"],["c","C","©","¢"],["v","V"],["b","B"],["n","N","ñ","Ñ"],["m","M","µ"],[",","<","ç","Ç"],[".",">"],["/","?","¿"],["Shift","Shift"]],[[" "," "," "," "],["Alt","Alt"]]],lang:["en"]}};return layouts.Hrvatski={name:"Croatian",keys:layouts.Bosanski.keys.slice(0),lang:["hr"]},layouts["Slovenščina"]={name:"Slovenian",keys:layouts.Bosanski.keys.slice(0),lang:["sl"]},layouts.Srpski={name:"Serbian Latin",keys:layouts.Bosanski.keys.slice(0),lang:["sr"]},layouts}()),angular.module("material.components.keyboard").constant("keyboardDeadkey",function(){var deadkey={'"':{a:"ä",e:"ë",i:"ï",o:"ö",u:"ü",y:"ÿ","ι":"ϊ","υ":"ϋ","ū":"ǖ","ú":"ǘ","ǔ":"ǚ","ù":"ǜ",A:"Ä",E:"Ë",I:"Ï",O:"Ö",U:"Ü",Y:"Ÿ","Ι":"Ϊ","Υ":"Ϋ","Ū":"Ǖ","Ú":"Ǘ","Ǔ":"Ǚ","Ù":"Ǜ","か":"が","き":"ぎ","く":"ぐ","け":"げ","こ":"ご","た":"だ","ち":"ぢ","つ":"づ","て":"で","と":"ど","さ":"ざ","し":"じ","す":"ず","せ":"ぜ","そ":"ぞ","は":"ば","ひ":"び","ふ":"ぶ","へ":"べ","ほ":"ぼ","カ":"ガ","キ":"ギ","ク":"グ","ケ":"ゲ","コ":"ゴ","タ":"ダ","チ":"ヂ","ツ":"ヅ","テ":"デ","ト":"ド","サ":"ザ","シ":"ジ","ス":"ズ","セ":"ゼ","ソ":"ゾ","ハ":"バ","ヒ":"ビ","フ":"ブ","ヘ":"ベ","ホ":"ボ"},"~":{a:"ã",l:"ł",n:"ñ",o:"õ",A:"Ã",L:"Ł",N:"Ñ",O:"Õ"},"^":{a:"â",e:"ê",i:"î",o:"ô",u:"û",w:"ŵ",y:"ŷ",A:"Â",E:"Ê",I:"Î",O:"Ô",U:"Û",W:"Ŵ",Y:"Ŷ"},"ˇ":{c:"č",d:"ď",e:"ě",s:"š",l:"ľ",n:"ň",r:"ř",t:"ť",u:"ǔ",z:"ž","ü":"ǚ",C:"Č",D:"Ď",E:"Ě",S:"Š",L:"Ľ",N:"Ň",R:"Ř",T:"Ť",U:"Ǔ",Z:"Ž","Ü":"Ǚ"},"˘":{a:"ă",g:"ğ",A:"Ă",G:"Ğ"},"-":{a:"ā",e:"ē",i:"ī",o:"ō",u:"ū",y:"ȳ","ü":"ǖ",A:"Ā",E:"Ē",I:"Ī",O:"Ō",U:"Ū",Y:"Ȳ","Ü":"Ǖ"},"`":{a:"à",e:"è",i:"ì",o:"ò",u:"ù","ü":"ǜ",A:"À",E:"È",I:"Ì",O:"Ò",U:"Ù","Ü":"Ǜ"},"'":{a:"á",e:"é",i:"í",o:"ó",u:"ú",y:"ý","α":"ά","ε":"έ","η":"ή","ι":"ί","ο":"ό","υ":"ύ","ω":"ώ","ü":"ǘ",A:"Á",E:"É",I:"Í",O:"Ó",U:"Ú",Y:"Ý","Α":"Ά","Ε":"Έ","Η":"Ή","Ι":"Ί","Ο":"Ό","Υ":"Ύ","Ω":"Ώ","Ü":"Ǘ"},"˝":{o:"ő",u:"ű",O:"Ő",U:"Ű"},"΅":{"ι":"ΐ","υ":"ΰ"},"°":{a:"å",u:"ů",A:"Å",U:"Ů"},"˛":{a:"Ć",e:"ę",i:"į",o:"ǫ",u:"ų",y:"ŷ",A:"ą",E:"Ę",I:"Į",O:"Ǫ",U:"Ų",Y:"Ŷ"},"˙":{c:"ċ",e:"ė",g:"ġ",z:"ż",C:"Ċ",E:"Ė",G:"Ġ",Z:"Ż"},"¸":{c:"ç",s:"ş",C:"Ç",S:"Ş"},"。":{"は":"ぱ","ひ":"ぴ","ふ":"ぷ","へ":"ぺ","ほ":"ぽ","ハ":"パ","ヒ":"ピ","フ":"プ","ヘ":"ペ","ホ":"ポ"}};return deadkey["¯"]=deadkey["-"],deadkey["¨"]=deadkey["゛"]=deadkey['"'],deadkey["´"]=deadkey["΄"]=deadkey["'"],deadkey["º"]=deadkey["°"],deadkey["‚"]=deadkey["¸"],deadkey}()),angular.module("material.components.keyboard").constant("keyboardNumpad",[[["$"],["£"],["€"],["¥"]],[["7"],["8"],["9"],["/"]],[["4"],["5"],["6"],["*"]],[["1"],["2"],["3"],["-"]],[["0"],["."],["="],["+"]]]),angular.module("material.components.keyboard").constant("keyboardSymbols",{" ":"NB\nSP","​":"ZW\nSP","‌":"ZW\nNJ","‍":"ZW\nJ"}),angular.module("material.components.keyboard").config(MdAutocompleteDecorator),angular.module("material.components.keyboard").provider("$mdKeyboard",MdKeyboardProvider),angular.module("material.components.keyboard").directive("mdKeyboard",MdKeyboardDirective).directive("useKeyboard",useKeyboardDirective)}(angular);